// This tool macro calculates the 3D distance between
// points defined by successive mouse clicks.
//
// Double-click on the tool icon to set the mark
// width or to enable label drawing. Alt-click on
// the end point to display one distance value
// per point pair and to display the same
// label on the starting and ending points.


macro "Unused Tool-1 - " {}  // leave empty toolbar slot
   var x1, y1, z1
   var markSize = 0;
   var label = false;

  macro "3D Distance Tool -C669-F3333-Fbb33" {
      getCursorLoc(x2, y2, z2, flags);
      xraw=x2; yraw=y2;
      alt = flags&8!=0;
      getPixelSize(unit, pixelWidth, pixelHeight, pixelDepth);
      x2*=pixelWidth; y2*=pixelHeight; z2*=pixelDepth;
      distance = sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1));
      x1=x2; y1=y2; z1=z2;
      if (unit=="pixel") unit = "pixels";
      row = nResults;
      if (row>0 && alt) row--;
      setResult("Distance ("+unit+")", row, distance);
      updateResults();
      if (markSize>0) {
          setLineWidth(markSize);
          drawLine(xraw, yraw, xraw, yraw);
      }
      if (label && nResults>0) {
          setKeyDown("none");
          makeRectangle(xraw, yraw, 1, 1);
          run("Label");
          makeRectangle(0, 0, 0, 0);
      }
  }

  macro "3D Distance Tool Options" {
      Dialog.create("3D Tool Options");
      Dialog.addNumber("Mark Size:", markSize);
      Dialog.addCheckbox("Draw Labels", label);
      Dialog.show();
      markSize = Dialog.getNumber();
      label = Dialog.getCheckbox();
  }

// 3D Angle Tool
//
// Use this tool to measure angles in 3D by selecting 3 points, 
// where the middle point is the vertex. Add it to StartupMacros.txt
// to have it automatically installed when ImageJ starts up.

var coords = newArray(9);
var angle_index = 0;

macro '3D Angle Tool - C037L0fb4L0fffLafacL9b9aD89L0011L1102L0213L1304L4233L3344L5054' {
    getCursorLoc(x, y, z, flags);
    getVoxelSize(vw, vh, vd, unit);
    x*=vw; y*=vh; z*=vd;
    coords[angle_index++] = x;
    coords[angle_index++] = y;
    coords[angle_index++] = z;
    if (angle_index == 3) {
        showStatus("selected first end point: " + x + ", " + y + ", " + z);
        showResults(NaN);
    } else if (angle_index == 6) {
        showStatus("selected vertex: " + x + ", " + y + ", " + z);
        showResults(NaN);
    } else {
        coords[0] -= coords[3]; 
        coords[1] -= coords[4]; 
        coords[2] -= coords[5]; 
        coords[6] -= coords[3]; 
        coords[7] -= coords[4]; 
        coords[8] -= coords[5]; 
		// scalar product 
        product = coords[0] * coords[6] 
            + coords[1] * coords[7] 
            + coords[2] * coords[8]; 
        length1 = sqrt(coords[0] * coords[0]
            + coords[1] * coords[1] 
            + coords[2] * coords[2]); 
        length2 = sqrt(coords[6] * coords[6] 
            + coords[7] * coords[7] 
            + coords[8] * coords[8]); 
        degrees = acos(product / length1 / length2) * 45 / atan(1); 
        showStatus("3d angle is " + degrees + " degrees"); 
        showResults(degrees);
        angle_index = 0; 
    }
}

function showResults(angle) {
    row = nResults - 1;
    if (angle_index==3) {
        row++;
        setResult("Label", row, "First point defined");
    } else if (angle_index==6)
        setResult("Label", row, "Vertex defined");
    else
        setResult("Label", row, "Last point defined");
    setResult("Angle", row, angle);
    updateResults();
}

